#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long;
use DBI;
use Template;
use Statistics::Descriptive;
use Set::IntSpan::Fast;
use Text::Table;
use Number::Format;
use SQL::Abstract;

#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------

my $usage = "

Synopsis:

SOBAcl [options] db_name
SOBAcl [options] file.gff3

SOBAcl file.gff3 > soba_count.txt

SOBAcl --create db_name file.gff3
SOBAcl db_name > soba_count.txt

See the Examples section below for more examples.

Description:

The Sequence Ontology Bioinformatics Analysis command line tool
(SOBAcl) will generate a variety of reports from the data in GFF3
files.  The data can optionally first be loaded into a database.

Options:

  --help      Print this help page and exit.

  --title     A title for the table, graph, or report.

  --columns [--series]
              The columns parameter indicates how data will be
              grouped into columns (or series for axis graphs and
              seperate graphs for pie graphs).  For example, using
              seqid as the value would create one column of data for
              each seqid (chromosome).  For bar and line graphs there
              would be a data series for each value.  For pie graphs,
              a separate graph would be generated for each
              value. (seqid, source, type, strand, phase, [file],
              stats).

  --rows [--x_data]
              The rows parameter indicates data will be grouped into
              rows (x-axis labels for graphs with axes; wedges for
              pie graphs).  For example, using type as the value
              would create one row of data for each unique feature
              type in the GFF3 file.  For bar and line graphs there
              would be one x-axis label for each type and for pie
              graphs there would be one pie wedge for each
              type. (seqid, source, [type], strand, phase, file)

  --data [--y_data]
              The data parameter indicates which data fields (columns
              or attributes in the GFF3 file) will be reported.  For
              example using score for the data parameter will create
              a report on the scores of features. (seqid, source,
              type, start, end, [length], score, strand, phase)

  --data_type The data_type parameter indicates how the data described
	      in the data parameter should be summarized.  For
	      example if data is length and data_type is 'mean', then
	      the mean length would be reported for each grouping of
	      the data. (count, [mean], harmonic_mean,
	      geometric_mead, median, mode, sum, min, max, variance,
	      standard deviation, range, footprint)

  --layout    The layout parameter describes how the data will be
	      presented.  ([table], lines, bars, hbars, points,
	      linespoints, area, pie, graphviz)

  --format    The format parameter determines how the output will be
	      formatted.  For all text based outputs the options are
	      (text, [tab], html, html_page, pdf).  For all graphical
	      layouts the options are (jpeg, [png], gif).

  --report    A report summarizes the data in more complex ways than
	      is possible with a table or a graph.  Available report types are:
	      attributes.

  --template  The name of a Template Toolkit template to process the
	      data with.

  --collapse  Collapse series data onto one graph.

  --so_file   The path to a Sequence Ontology OBO file.

  --select    A statement (in SQL or in perl hash or array reference
	      notation) that will constrain the features that are
	      used in the report.  For example \"seqid = 'chr1' AND
	      source = 'FlyBase'\" would only report on features from
	      chromosome 1 that had a source FlyBase.  This same
	      constraint could be in given as \"seqid => 'chr1',
	      source => 'FlyBase'\".  See SQL::Abstract documentation
	      for use of the hash/array reference notation for
              constraints.

  --output    For graphics the give value will be used as a filename.  If
	      multiple files are generated then this value will be
	      prepended to the row/series value to generate the final
	      filename.  In either case the format type will be added
	      as an extension, so don't add your own.

  --gd        Pass key=value pairs to the GD::Graph object to customize
	      charts.

  --gv        Pass key=value pairs to the Graphviz object to customize
	      graphs.

  --gv_node   Pass key=value pairs to the Graphviz->add_node methodto
	      customize graphs.

  --gv_edge   Pass key=value pairs to the Graphviz->add_edge method to
	      customize graphs.

  --create    Create a new database and load the given file.

GD Graph Options:

All GD graphs:
title width height t_margin b_margin l_margin r_margin logo logo_resize
logo_position transparent interlaced

Colours:
bgclr fgclr boxclr accentclr shadowclr shadow_depth labelclr
axislabelclr legendclr valuesclr textclr dclrs borderclrs cycle_clrs
accent_treshold

Axes GD graphs:
title x_label y_label long_ticks tick_length x_ticks y_tick_number
y_number_format y1_number_format y2_number_format x_label_skip
y_label_skip x_tick_offset x_label_position use_axis zero_axis
zero_axis_only y_max_value y_min_value axis_space text_space cumulate
overwrite correct_width

Axes GD graphs - values:
show_values values_vertical values_space values_format

Axes GD graphs (numerical X):
x_tick_number x_min_value, x_max_value x_number_format x_label_skip

Bar GD graphs:
bar_width bar_spacing bargroup_spacing line_types line_type_scale
line_width skip_undef

Axes GD graphs (Points):
markers
marker_size

Mixed GD graphs:
types
default_type

Legend:
legend_placement
legend_spacing
legend_marker_width
legend_marker_height
lg_cols

Pie GD graphs:
3d
pie_height
start_angle
suppress_angle
label

Examples:

# Create a default report directly from a GFF3 file.
SOBAcl file.gff3 > soba_type_counts.txt
SOBAcl file1.gff3 file2.gff3 > soba_type_counts.txt

# Load some data into the database
SOBAcl --create db_name file.gff3

# Create a default report of feature counts from a database
SOBAcl db_name > soba_count.txt

# Various ways to create feature type length reports in different formats
SOBAcl --columns seqid --rows type --data length --data_type min --layout table --format html
SOBAcl --columns source --rows type --data length --data_type max --layout table --format tab
SOBAcl --columns file --rows type --data length --data_type footprint --layout table --format html_page

# Variouis ways to create other reports
SOBAcl --report attributes --format html_page db_name

# Create a custom report by supplying a template
SOBAcl --report gene_models --limit '{seqid => \"chr1\", source => \"FlyBase\"}' \
       --template my_template.tt db_name > my_gene_models.txt

See the file sobacl_test.sh included with the distribution for lots more examples.

Report errors to:
barry.moore\@genetics.utah.edu

";


my ($help, $custom, $title, $columns, $rows, $data, $data_type,
    $layout, $format, $report, $template, $collapse, $so_file,
    $select, $output, %gd, %gv, %gv_node, %gv_edge, $create);

my $opt_success = GetOptions('help'	    	=> \$help,
			     'custom'       	=> \$custom,
			     'title'        	=> \$title,
			     'columns|series=s' => \$columns,
			     'rows|x_data=s'	=> \$rows,
			     'data|y_data=s'	=> \$data,
			     'data_type=s'  	=> \$data_type,
			     'select=s'	    	=> \$select,
			     'layout=s'	    	=> \$layout,
			     'report=s'     	=> \$report,
			     'format=s'	    	=> \$format,
			     'collapse'     	=> \$collapse,
			     'so_file=s'    	=> \$so_file,
			     'output=s'     	=> \$output,
			     'template=s'   	=> \$template,
			     'gd=s'         	=> \%gd,
			     'gv=s'         	=> \%gv,
			     'gv_node=s'    	=> \%gv_node,
			     'gv_edge=s'    	=> \%gv_edge,
			     'create=s'     	=> \$create,
			    );

if ($help) {
 print $usage;
 exit;
}
die $usage unless $opt_success;
die custom_help() if $custom;

if ($layout && $layout eq 'graphviz') {
  $data = 'type';
  $data_type = 'count';
}

if ($data_type) {
  $data_type = $data_type eq 'range' ? 'sample_range' : $data_type;
}

my $id_counter;
my $UNIQ_ID = sub {return sprintf("SOBA_%09d", ++$id_counter)};

my $args = {'title'     => $title,
	    'columns'   => $columns,
	    'rows'	=> $rows,
	    'data'	=> $data,
	    'data_type' => $data_type,
	    'select'	=> $select,
	    'layout'	=> $layout,
	    'format'	=> $format,
	    'report'    => $report,
	    'collapse'  => $collapse,
	    'so_file'   => $so_file,
	    'output'    => $output,
	    'template'  => $template,
	    'gd'        => \%gd,
	    'gv=s'      => \%gv,
	    'gv_node'   => \%gv_node,
	    'gv_edge'   => \%gv_edge,
	    'create'    => $create,
	   };

my @db_names = @ARGV;
die $usage unless @db_names;

for my $db_name (@db_names) {
  if ($db_name =~ /\.gff3?(\.gz|\.bz|\.zip)?$/) {
    $db_name = ($db_name =~ /.gz$/  ? "gunzip $db_name |" :
		$db_name =~ /.bz$/  ? "bunzip $db_name |" :
		$db_name =~ /.zip$/ ? "unzip $db_name |"  :
		$db_name
	       );
  }
  else {
    $db_name = join ':', ('dbi', 'SQLite', $db_name);
  }
}

$args->{db_names} = \@db_names;

if ($args->{create}) {
  create_db($args);
  print "Database $create created\n";
  exit;
}

my $include_path = $0;
$include_path =~ s/SOBAcl$//;
$include_path .= '../templates';

my $TT_CONFIG = {INCLUDE_PATH => $include_path};

if ($args->{report}) {
  if ($args->{report} eq 'attributes') {
    my $data_set = build_attribute_data($args);
    $args->{data_set} = $data_set;
    create_report($args);
  }
  elsif ($args->{report} eq 'gff') {
        create_report($args);
  }
  elsif ($args->{report} eq 'gvf') {
    make_gvf_report($args);
  }
  elsif ($args->{report} eq 'ontology') {
    make_ontology_report($args);
  }
  elsif ($args->{report} eq 'invalid_term') {
    make_invalid_term_report($args);
  }
  elsif ($args->{report} eq 'intron_density') {
    make_intron_density_report($args);
  }
  else {
    die "FATAL : invalid_report : $args->{report}";
  }
  exit;
}

$args->{columns}   ||= 'file';
$args->{rows}      ||= 'type';
$args->{data}      ||= $args->{rows};
$args->{data_type} ||= 'count';
$args->{layout}    ||= 'table';
$args->{format}    ||= 'text';
$args->{output}    ||= 'SOBAcl_graphic';
$args->{title}     ||= join ' ', ($args->{rows},  $args->{data}, '(' . $args->{data_type} . ')');

if ($args->{layout} eq 'table') {
  my $data_set = build_data($args);
  $args->{data_set} = $data_set;
  make_table($args);
}
elsif ($args->{layout} =~ /^(lines|bars|hbars|points|linespoints|area|pie)$/) {
  my $class = "GD::Graph::$args->{layout}";
  $args->{class} = $class;
  eval "require $class";
  die "FATAL : cant_load_module : $@" if $@;
  my $data_set = build_data($args);
  $args->{data_set} = $data_set;
  make_gd_graph($args);
}
elsif ($args->{layout} eq 'graphviz') {
  my $data_set = build_data($args);
  $args->{data_set} = $data_set;
  make_graphviz($args);
}

#-----------------------------------------------------------------------------
#-------------------------------- SUBROUTINES --------------------------------
#-----------------------------------------------------------------------------

sub build_data {

  my $args = shift;

  my ($db_names, $columns, $rows, $data, $data_type, $layout, $select) =
    @{$args}{qw(db_names columns rows data data_type layout select)};

  ($columns, $rows) = ($rows, $columns) unless $args->{layout} eq 'table';

  my %data_set;
  my %all_columns;

  my $att_data;
  if ($data =~ /^\+/) {
    $data =~ s/&^\+//;
    $att_data++;
  }
  for my $db_name (@{$db_names}) {
    my $feature_iterator = make_iterator($db_name, $select);

    while (my $f = &{$feature_iterator}) {
      my $row     = $rows    eq 'file' ? $db_name : @{$f}{$rows};
      my $column  = $columns eq 'file' ? $db_name : @{$f}{$columns};

      $row    = $row    eq '.' ? 'NULL' : $row;
      $column = $column eq '.' ? 'NULL' : $column;

      $all_columns{$column}++;

      my $datum;
      if ($data eq 'length') {
	my ($start, $end) = @{$f}{qw(start end)};
	$datum = $end - $start;
      }
      elsif ($data eq $rows || $data_type eq 'count') {
	if ($att_data) {
	  $datum = 1 if  exists $f->{attributes}{$data};
	}
	else {
	  $datum = 1;
	}
      }
      else {
	if ($att_data) {
	  $datum = (! exists $f->{attributes}{$data} ? 0 : $f->{attributes}{$data});
	}
	else {
	  $datum = ($f->{$data} eq '.' ? 0 : $f->{$data});
	}
      }

      if ($data_type =~ /^(count|mean|sum|variance|min|max|range)$/) {
	$data_set{$row}{$column}{stats} ||= Statistics::Descriptive::Sparse->new();
	$data_set{$row}{$column}{stats}->add_data($datum);
      }
      elsif ($data_type eq 'footprint') {
	$data_set{$row}{$column}{set} ||= Set::IntSpan::Fast->new();
	my ($start, $end) = @{$f}{qw(start end)};
	$data_set{$row}{$column}{set}->add_range($start, $end);
      }
      else {
	$data_set{$row}{$column}{stats} ||= Statistics::Descriptive::Full->new();
	$data_set{$row}{$column}{stats}->add_data($datum);
      }
    }
  }

  if ($data_type eq 'footprint') {
    for my $row (keys %data_set) {
      for my $column (keys %all_columns) {
	my $datum;
	if (exists $data_set{$row}{$column}{set}) {
	  my $ranges = $data_set{$row}{$column}{set}->iterate_runs();
	  while (my ($start, $end) = $ranges->()) {
	    $datum += abs($end - $start + 1);
	  }
	}
	else {
	  $datum ||= 0;
	}
	$data_set{$row}{$column}{stats}{footprint} = $datum;
      }
    }
  }

  for my $row (keys %data_set) {
    for my $column (keys %all_columns) {
      $data_set{$row}{$column} ||= undef;
    }
  }

  return \%data_set;
}

#-----------------------------------------------------------------------------

sub make_table {
  my $args = shift;

  my %templates = (html      => 'soba_table_html.tt',
		   html_page => 'soba_table_html_page.tt',
		   text      => 'soba_table_text.tt',
		   tab       => 'soba_table_tab.tt',
		  );

  add_text_table($args) if $args->{format} eq 'text';

  $template ||= $templates{$args->{format}};

  my $tt = Template->new($TT_CONFIG);

  $tt->process($template, $args);
}

#-----------------------------------------------------------------------------

sub add_text_table {

  my $args = shift;
  my $data_set = $args->{data_set};
  my $data_type = $args->{data_type};

  my $nf = Number::Format->new;
  my ($row) = keys %{$data_set};
  my @table_data;
  for my $row (sort keys %{$data_set}) {
    my @row_data = ($row);
    for my $column (sort keys %{$data_set->{$row}}) {
      my $datum;
      if ($data_type eq 'footprint') {
	$datum = $data_set->{$row}{$column}{stats}{footprint};
      }
      else {
	$datum = (exists $data_set->{$row}{$column}{stats}      ?
		  $data_set->{$row}{$column}{stats}->$data_type :
		  0
		 );
      }
      $datum = $nf->round($datum, 2);
      push @row_data, $datum
    }
    push @table_data, \@row_data;
  }
  my @columns = sort keys %{$data_set->{$row}};
  unshift @columns, $rows;
  @columns = map {$_, \'|'} @columns;
  unshift @columns,  \'|';
  my $table = Text::Table->new(@columns);
  $table->load(@table_data);

  $args->{text_table} = $table;
}

#-----------------------------------------------------------------------------

sub make_gd_graph {
  my $args = shift;

  # GD Graph Options:
  #
  # All GD graphs:
  # title width height t_margin b_margin l_margin r_margin logo logo_resize
  # logo_position transparent interlaced
  #
  # Colours:
  # bgclr fgclr boxclr accentclr shadowclr shadow_depth labelclr
  # axislabelclr legendclr valuesclr textclr dclrs borderclrs cycle_clrs
  # accent_treshold
  #
  # Axes GD graphs:
  # x_label y_label long_ticks tick_length x_ticks y_tick_number
  # y_number_format y1_number_format y2_number_format x_label_skip
  # y_label_skip x_tick_offset x_label_position y_label_position
  # x_labels_vertical x_plot_values box_axis no_axes two_axes
  # y_plot_values use_axis zero_axis zero_axis_only y_max_value
  # y_min_value axis_space text_space cumulate overwrite correct_width
  #
  # Axes GD graphs - values:
  # show_values values_vertical values_space values_format
  #
  # Axes GD graphs (numerical X):
  # x_tick_number x_min_value x_max_value x_number_format x_label_skip
  #
  # Bar GD graphs:
  # bar_width bar_spacing bargroup_spacing line_types line_type_scale
  # line_width skip_undef
  #
  # Axes GD graphs (Points):
  # markers marker_size
  #
  # Mixed GD graphs:
  # types default_type
  #
  # Legend:
  # legend_placement legend_spacing legend_marker_width
  # legend_marker_height lg_cols
  #
  # Pie GD graphs:
  # 3d pie_height start_angle suppress_angle label

  my %gd_args = ref $args->{gd} eq 'HASH' ? %{$args->{gd}} : ();
  my @new_args   = ($gd_args{width} || 400, $gd_args{height} || 300);
  delete @gd_args{qw(width height)};

  $gd_args{title}  ||= $args->{title} || $args->{db_name};
  $gd_args{x_label} ||= $args->{rows};
  $gd_args{y_label} ||= "$args->{data} ($args->{data_type})";
  $gd_args{x_label_position} ||= 0.5;

  if ($args->{layout} eq 'area') {
    delete @gd_args{qw(

			   bar_width bar_spacing bargroup_spacing
			   line_types line_type_scale line_width
			   skip_undef markers marker_size types
			   default_type 3d pie_height start_angle
			   suppress_angle label

			)};
  }
  elsif ($args->{layout} =~ /^h?bars$/) {
    delete @gd_args{qw(

			   x_tick_number x_min_value x_max_value
			   x_number_format x_label_skip markers
			   marker_size types default_type 3d
			   pie_height start_angle suppress_angle label

			)};
  }
  elsif ($args->{layout} eq 'lines') {
    delete @gd_args{qw(

			   bar_width bar_spacing bargroup_spacing
			   line_types line_type_scale line_width
			   skip_undef markers marker_size types
			   default_type 3d pie_height start_angle
			   suppress_angle label

			)};
  }
  elsif ($args->{layout} eq 'linespoints') {
    delete @gd_args{qw(

			   bar_width bar_spacing bargroup_spacing
			   types default_type 3d pie_height
			   start_angle suppress_angle label

			)};
  }
  elsif ($args->{layout} eq 'mixed') {
    delete @gd_args{qw(

			   3d pie_height start_angle suppress_angle
			   label

			)};
  }
  elsif ($args->{layout} eq 'pie') {
    delete @gd_args{qw(

			   x_label y_label long_ticks tick_length
			   x_ticks y_tick_number y_number_format
			   y1_number_format y2_number_format
			   x_label_skip y_label_skip x_tick_offset
			   x_label_position y_label_position
			   x_labels_vertical x_plot_values box_axis
			   no_axes two_axes y_plot_values use_axis
			   zero_axis zero_axis_only y_max_value
			   y_min_value axis_space text_space cumulate
			   overwrite correct_width show_values
			   values_vertical values_space values_format
			   x_tick_number x_min_value x_max_value
			   x_number_format x_label_skip bar_width
			   bar_spacing bargroup_spacing line_types
			   line_type_scale line_width skip_undef
			   markers marker_size types default_type
			   legend_placement legend_spacing
			   legend_marker_width legend_marker_height
			   lg_cols

			)};
    $args->{collapse} = undef;
    $gd_args{suppress_angle} ||= 10;
  }
  elsif ($args->{layout} eq 'points') {
    delete @gd_args{qw(

			   bar_width bar_spacing bargroup_spacing
			   line_types line_type_scale line_width
			   skip_undef types default_type 3d pie_height
			   start_angle suppress_angle label

			)};
  }

  my ($data_set, $class, $format, $data_type) =
    @{$args}{qw(data_set class format data_type)};

  my $y_max_value = $gd_args{y_max_value};

  my ($any_series) = keys %{$data_set};
  my @x_values = sort keys %{$data_set->{$any_series}};
  if ($args->{collapse}) {
    my @gd_data;
    push @gd_data, \@x_values;
    for my $series (sort keys %{$data_set}) {
      my @series_data;
      for my $x_value (sort keys %{$data_set->{$series}}) {
	my $datum = $data_set->{$series}{$x_value}{stats}->$data_type;
	if ($y_max_value) {
	  $datum = $datum > $y_max_value ? $y_max_value : $datum;
	}
	push @series_data, $datum;
      }
      push @gd_data, \@series_data;
    }
    my $graph = $class->new(@new_args);
    $graph->set(%gd_args, legend_placement => 'RL') or die $graph->error;
    my @legend_keys = sort keys %{$data_set};
    $graph->set_legend(@legend_keys) if scalar @legend_keys > 1;
    my $gd = $graph->plot(\@gd_data) or die $graph->error;

    my $file   = $args->{output};
    $file =~ s/_$//;
    $file .= ".$format";
    open (my $OUT, '>', $file) or die "FATAL : cant_open_file_for_writing : $file\n";
    binmode $OUT;
    if ($format eq 'gif') {
      print $OUT $gd->gif;
    }
    elsif ($format eq 'jpeg') {
      print $OUT $gd->jpeg;
    }
    elsif ($format eq 'png') {
      print $OUT $gd->png;
    }
    close $OUT;
  }
  else {
    for my $series (sort keys %{$data_set}) {
      my @gd_data;
      push @gd_data, \@x_values;
      my @series_data;
      for my $x_value (sort keys %{$data_set->{$series}}) {
	my $datum = $data_set->{$series}{$x_value}{stats}->$data_type;
	if ($y_max_value) {
	  $datum = $datum > $y_max_value ? $y_max_value : $datum;
	}
	push @series_data, $datum;
      }
      push @gd_data, \@series_data;
      my $graph = $class->new(@new_args);
      $graph->set(%gd_args) or die $graph->error;
      my $gd = $graph->plot(\@gd_data) or die $graph->error;
      my $file   = $args->{output};
      $file .= "_$series";
      $file .= ".$format";
      open (my $OUT, '>', $file) or die "FATAL : cant_open_file_for_writing : $file\n";
      binmode $OUT;
      if ($format eq 'gif') {
	print $OUT $gd->gif;
      }
      elsif ($format eq 'jpeg') {
	print $OUT $gd->jpeg;
      }
      elsif ($format eq 'png') {
	print $OUT $gd->png;
      }
      close $OUT;
    }
  }
}

#-----------------------------------------------------------------------------

sub make_graphviz {
  my $args = shift;

  # TODO: Handle erros
  eval "require GO::Parser";
  eval "require GraphViz";

  my $parser = new GO::Parser({handler => 'obj'});
  $parser->parse($args->{so_file});
  my $so_graph = $parser->handler->graph;

  my $data_set = $args->{data_set};

  for my $series (keys %{$data_set}) {
    my @term_names = keys %{$data_set->{$series}};;
    my @file_terms;
    for my $name (@term_names) {
      my $term = $so_graph->get_term_by_name($name);
      push @file_terms, $term if $term;
    }

    my $subgraph = $so_graph->subgraph_by_terms(\@file_terms);
    my $terms = $subgraph->get_all_nodes;

    my $gv = GraphViz->new(layout   => 'dot',
			   directed => '1',
			   ratio    => 'auto',
			   overlap  => 'scalexy',
			   bgcolor  => 'white',
			   name     => 'large',
			  );

    for my $term (@{$terms}){
      my $name = $term->name;
      my $label = $args->{gv_value} ? "$name\n" . $data_set->{$series}{$name}{stats}->$data_type : $name;
      my $fillcolor = $data_set->{$series}{$name} ? 'red' : 'black';
      $gv->add_node($term->name,
		    fontsize  => 13,
		    shape     => 'box',
		    style     => 'filled',
		    fontcolor => 'white',
		    fillcolor => $fillcolor,
		    #URL       => $term_url . $term->acc,
		   );
    }

    my %seen;
    for my $term1(@{$terms}){
      my $acc1 = $term1->acc;
      for my $term2(@{$terms}){
	my $acc2 = $term2->acc;
	next if $acc1 eq $acc2;
	my $relations = $subgraph->get_relationships_between_terms($acc1, $acc2);
	for my $relation (@{$relations}) {
	  $gv->add_edge($term1->name => $term2->name,
			label       => ' ' . $relation ->type(),
			dir         => 'back',
			style       => 'solid'
		       );
	  $seen{$term1->acc}{$term2->acc}++;
	}
      }
    }
    my $file = $args->{output};
    my $format = $args->{format};
    $file .= $series if scalar keys %{$data_set} > 1;
    $file =~ s/_$//;
    $file .= ".$format";
    open (my $OUT, '>', $file) or die "FATAL : cant_open_file_for_writing : $file\n";
    binmode $OUT;
    if ($format eq 'gif') {
      print $OUT $gv->as_gif;
    }
    elsif ($format eq 'jpeg') {
      print $OUT $gv->as_jpeg;
    }
    elsif ($format eq 'png') {
      print $OUT $gv->as_png;
    }
    elsif ($format eq 'text') {
      print $OUT $gv->as_text;
    }
    close $OUT;
  }
}
#-----------------------------------------------------------------------------

sub build_attribute_data {
  my $args = shift;

  my $db_names = $args->{db_names};

  my %data_set;
  for my $db_name (@{$db_names}) {
    my $feature_iterator = make_iterator($db_name, $select);
    while (my $f = &{$feature_iterator}) {
      my ($source, $type, $attributes) = @{$f}{qw(source type attributes)};
      $data_set{source_count}{$source}++;
      $data_set{type_count}{$source}{$type}++;
      for my $key (keys %{$attributes}) {
	my $type_key = $type . $key;
	$data_set{source_span}{$source}{$type_key}++;
	$data_set{att_count}{$source}{$type}{$key}++;
      }
    }
  }

  return \%data_set;
}

#-----------------------------------------------------------------------------

sub create_report {

  my $args = shift;

  my %templates = (attributes => {'html_page' => 'soba_report_attributes_html.tt',
				  'text'      => 'soba_report_attributes_text.tt',
				 },
		  );

  unless ($templates{$args->{report}} &&
	  $templates{$args->{report}}{$args->{format}}) {
    die ("FATAL : report_not_implimented : " . $args->{report} . ' : ' .
	 $args->{format});
  }

  $template ||= $templates{$args->{report}}{$args->{format}};

  my $tt = Template->new($TT_CONFIG);

  $tt->process($template, $args);
}

#-----------------------------------------------------------------------------

sub make_iterator {

  my ($db_name, $select) = @_;

  my $feature_iterator;
  if ($db_name =~ /\.gff3?(\.gz|\.bz|\.zip)?(\s\|)?$/) {
    my %where;
    if ($select) {
      %where = eval $select;
    }
    open (my $IN, $db_name) or die "FATAL : cant_open_file_for_reading : $db_name\n";
    $feature_iterator =
      sub {
	my %f;
      LINE:
	while (my $line = <$IN>) {
	  next LINE if $line =~ /^(\s*|\s*\#.*)$/;
	  chomp $line;
	  @f{qw(seqid source type start end score strand phase attributes)} =
	    split /\t/, $line;
	  my @pairs = split /;/, $f{attributes};
	  $f{attributes} = undef;
	  for my $pair (@pairs) {
	    my ($key, $value_text) = split /=/, $pair;
	    my @values = split /,/, $value_text;
	    push @{$f{attributes}{$key}}, @values;
	  }
	  $f{feature_id} = $f{attributes}{ID} ? $f{attributes}{ID}[0] : &$UNIQ_ID();
	  if ($select) {
	  CONSTRAINT:
	    for my $key (keys %where) {
	      my $values = $where{$key};
	      my @values = ref $values eq 'ARRAY' ? @{$values} : ($values);
	      my $op = ($values[0] =~ /^(==|eq|!=|ne|<|lt|<=|le|>|gt|>=|ge|=~|!~)$/) ? shift @values : 'eq';
	      for my $contraint (@values) {
		my $compare = "'$f{$key}' $op '$contraint'";
		$compare =~ s/'//g if $op !~ /[eanltg]/;
		unless (eval $compare) {
		  undef %f;
		  next LINE;
		}
	      }
	    }
	  }
	  last;
	}
	return %f ? \%f : undef;
      }
    }
  else {
    my $dbh = DBI->connect($db_name);
    my ($where_stmt, @bind);
    if ($select) {
      my %where = eval $select;
      my $sql = SQL::Abstract->new;
      ($where_stmt, @bind) = $sql->where(\%where);
    }
    my $stmt = 'SELECT * FROM feature ';
    $stmt .= $where_stmt if $where_stmt;
    my $f_sth = $dbh->prepare($stmt);
    my $a_sth = $dbh->prepare('SELECT * FROM attribute where feature_id = ?');
    my $rv = $f_sth->execute(@bind);
    $feature_iterator =
      sub {
	my @data = $f_sth->fetchrow_array;
	return undef unless scalar @data;
	my %f;
	@f{qw( feature_id seqid source type start end score strand phase bin)} = @data;
	if ($args->{attributes}) {
	  $a_sth->execute($f{feature_id});
	  my $as = $a_sth->fetchall_arrayref;
	  my %a =	map {$_->[3] => $_->[4]} @{$as};
	  $f{attributes} = \%a;
	}
	return \%f;
      }
    }
  return $feature_iterator;
}

#-----------------------------------------------------------------------------

sub create_db {

  my $args = shift;

  my $db_name = $args->{create};

  my $dsn = join ':', ('dbi', 'SQLite', $db_name);


  my $dbh = DBI->connect($dsn);

  $dbh->do("DROP TABLE IF EXISTS feature");
  $dbh->do("DROP TABLE IF EXISTS attribute");
  $dbh->do("DROP TABLE IF EXISTS relationship");
  $dbh->do("CREATE TABLE feature ("    .
	   "feature_id TEXT, "    .
	   "seqid      TEXT, "    .
	   "source     TEXT, "    .
	   "type       TEXT, "    .
	   "start      INTEGER, " .
	   "end        INTEGER, " .
	   "score      TEXT, "    .
	   "strand     TEXT, "    .
	   "phase      TEXT,"     .
	   "bin        TEXT)"
	  );
  $dbh->do("CREATE TABLE attribute ("  .
	   "attribute_id INTEGER PRIMARY KEY AUTOINCREMENT, " .
	   "feature_id TEXT, " .
	   "att_key    TEXT, " .
	   "att_value  TEXT)"
	  );
  $dbh->do("CREATE TABLE relationship ("  .
	   "parent       TEXT, " .
	   "child        TEXT, " .
	   "relationship TEXT) "
	  );


  my @files = @{$args->{db_names}};
  my @features;
  my $count = 1;
  for my $file (@files) {
    my $feature_iterator = make_iterator($file, $select);
    while (my $feature = &{$feature_iterator}) {
      push @features, $feature;
      add_features($dbh, \@features) unless $count++ % 10000;
    }
  }
  add_features($dbh, \@features);

  # Create feature indeces
  $dbh->do("CREATE INDEX feat_feature_id_index ON feature (feature_id)");
  # $dbh->do("CREATE INDEX feat_seqid_start_end_index ON feature (seqid, start, end)");
  $dbh->do("CREATE INDEX feat_bin_index ON feature (bin)");
  # $dbh->do("CREATE INDEX feat_type_index ON feature (type)");

  # Create attribute indeces
  $dbh->do("CREATE INDEX att_feature_id_index ON attribute (feature_id)");
  # $dbh->do("CREATE INDEX att_key_value_index ON attribute (att_key, att_value)");

  # Create relationship indeces
  $dbh->do("CREATE INDEX rel_parent_index ON relationship (parent)");
  $dbh->do("CREATE INDEX rel_child_index ON relationship (child)");
  $dbh->disconnect;
}

#-----------------------------------------------------------------------------

sub add_features {

  my ($dbh, $features) = @_;

  my ($feat_rows, $att_rows, $rel_rows) = prepare_features($features);
  @{$features} = ();

  # "feature_id VARCHAR(255), " .
  # "seqid      VARCHAR(255), " .
  # "source     VARCHAR(255), " .
  # "type       VARCHAR(255), " .
  # "start      INT, "          .
  # "end        INT, "          .
  # "score      VARCHAR(255), " .
  # "strand     VARCHAR(1), "   .
  # "phase      VARCHAR(1),"    .
  # "bin        VARCHAR(15))"

  my $feat_stmt = "INSERT INTO feature VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
  my $feat_sth = $dbh->prepare($feat_stmt);

  # http://search.cpan.org/~adamk/DBD-SQLite-1.29/lib/DBD/SQLite.pm#Transactions
  $dbh->begin_work;
  for my $feat_row (@{$feat_rows}) {
    my $rv = $feat_sth->execute(@{$feat_row});
    unless ($rv) {
      my $warn_code = 'bad_feature_table_insert :';
      my $data = join ', ', @{$feat_row};
      $warn_code    .= $data;
      warn $warn_code;
    }
  }

  # "attribute_id INT NOT NULL AUTO_INCREMENT, " .
  # "feature_id VARCHAR(255), " .
  # "att_key    VARCHAR(255), "    .
  # "att_value  TEXT, "  .


  my $att_stmt = "INSERT INTO attribute VALUES (?, ?, ?, ?)";
  my $att_sth = $dbh->prepare($att_stmt);

  for my $att_row (@{$att_rows}) {
    my $rv = $att_sth->execute(@{$att_row});
    unless ($rv) {
      my $warn_code = 'bad_attribute_table_insert :';
      my $data = join ', ', @{$att_row};
      $warn_code    .= $data;
      warn $warn_code;
    }
  }

  # "parent       VARCHAR(255), " .
  # "child        VARCHAR(255), "    .
  # "relationship VARCHAR(255)) "

  my $rel_stmt = "INSERT INTO relationship VALUES (?, ?, ?)";
  my $rel_sth = $dbh->prepare($rel_stmt);

  for my $rel_row (@{$rel_rows}) {
    my $rv = $rel_sth->execute(@{$rel_row});
    unless ($rv) {
      my $warn_code = 'bad_relationship_table_insert :';
      my $data = join ', ', @{$rel_row};
      $warn_code    .= $data;
      warn $warn_code;
    }
  }
  $dbh->commit;
}

#-----------------------------------------------------------------------------

sub prepare_features {

  my $feature_hashes = shift;

  $feature_hashes = ref $feature_hashes eq 'ARRAY' ? $feature_hashes :
    [$feature_hashes];

  my (@features, @attributes, @relationships);

  for my $feature_hash (@{$feature_hashes}) {
    my $feature_id = $feature_hash->{feature_id};
    my ($bin) = get_feature_bins($feature_hash);
    my $attributes = $feature_hash->{attributes};
    my @parents = ref $attributes->{Parent} eq 'ARRAY' ? @{$attributes->{Parent}} : ();
    my @feature_data = (@{$feature_hash}{qw(feature_id seqid source
					    type start end score strand
					    phase)},
			$bin);
    push @features, \@feature_data;

    for my $key (keys %{$attributes}) {
      my @values = @{$attributes->{$key}};
      for my $value (@values) {
	push @attributes, [undef, $feature_id, $key, $value];
      }
    }

    for my $parent (@parents) {
      my @relationship_data = ($parent, $feature_id, undef);
      push @relationships, \@relationship_data;
    }
  }
  return (\@features, \@attributes, \@relationships);
}

#-----------------------------------------------------------------------------

sub custom_help {

  return

<<CUSTOM;

Custom help hasn't been written yet.

CUSTOM

}

#-----------------------------------------------------------------------------

sub get_feature_bins {

    my $feature = shift;

    my ($seqid, $start, $end);
    if (ref $feature eq 'HASH') {
      ($seqid, $start, $end) = @{$feature}{qw(seqid start end)};
    }
    elsif (blessed $feature && $feature->can('seqid') &&
	   $feature->can('start') && $feature->can('end')) {
      ($seqid, $start, $end) = ($feature->seqid, $feature->start,
				$feature->end)
    }
    else {
      my $data = ref $feature || $feature;
      die "FATAL : invalid_arguments_to_get_feature_bins : $data";
    }
    my @feature_bins;
    my $count;
    my $single_bin;
    for my $bin_size (128_000, 1_000_000, 8_000_000, 64_000_000,
		      512_000_000) {
      $count++;
      my $start_bin = int($start/$bin_size);
      my $end_bin   = int($end/$bin_size);
      my @these_bins = map {$_ = join ':', ($seqid, $count, $_)} ($start_bin .. $end_bin);
	if (! $single_bin && scalar @these_bins == 1) {
	    $single_bin = shift @these_bins;
	}
	unshift @feature_bins, @these_bins;
    }
    unshift @feature_bins, $single_bin;
    return wantarray ? @feature_bins : \@feature_bins;
}

#-----------------------------------------------------------------------------


